generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Applicant {
  id                   String            @id @default(uuid())
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  email                String            @unique @db.VarChar(255)
  login                String            @unique @db.VarChar(255)
  contact              String            @db.VarChar(36)
  firstName            String            @db.VarChar(50)
  middleName           String?           @db.VarChar(50)
  lastName             String            @db.VarChar(50)
  phone                String?           @unique @db.VarChar(15)
  birthDate            DateTime?
  gender               Gender?
  city                 String?           @db.VarChar(255)
  country              String?           @db.VarChar(62)
  aboutMe              String?           @db.VarChar(3000)
  nickname             String?           @unique @db.VarChar(50)
  isReadyToRelocate    Boolean?
  isVisibleToEmployers Boolean           @default(true)
  isConfirmedByManager Boolean           @default(false)
  isEmailConfirmed     Boolean           @default(false)
  resume               Resume?
  meetings             Meeting[]
  vacancyResponses     VacancyResponse[]
  password             Password?
  aiChats              ApplicantAiChat[]
  hhToken              HhToken?
  googleTokenSub       String?           @unique
}

model Employer {
  id                   String             @id @default(uuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  email                String             @unique @db.VarChar(255)
  login                String             @unique @db.VarChar(255)
  contact              String             @db.VarChar(50)
  firstName            String             @db.VarChar(50)
  middleName           String?            @db.VarChar(50)
  lastName             String             @db.VarChar(50)
  phone                String?            @unique @db.VarChar(15)
  name                 String             @db.VarChar(256)
  inn                  String?            @db.VarChar(12)
  ogrn                 String?            @db.Char(13)
  legalForm            EmployerLegalForm?
  agreementNumber      Int?               @default(autoincrement())
  agreementDate        DateTime?
  isConfirmedByManager Boolean            @default(false)
  isEmailConfirmed     Boolean            @default(false)
  city                 String?            @db.VarChar(255)
  isStartup            Boolean            @default(false)
  size                 EmployerSize?
  website              String?            @db.VarChar(100)
  description          String?            @db.VarChar(3000)
  meetings             Meeting[]
  vacancies            Vacancy[]
  password             Password?
  applicantAiChats     ApplicantAiChat[]
}

model Manager {
  id              String                @id @default(uuid())
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  login           String                @unique @db.VarChar(255)
  name            String                @db.VarChar(50)
  accessScopes    ManagerAccessScopes[]
  slots           MeetingSlot[]
  password        Password?
  recommendations VacancyResponse[]
}

model Password {
  id   String @id @default(uuid())
  hash String @db.VarChar(255)

  applicant   Applicant? @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String?    @unique

  employer   Employer? @relation(fields: [employerId], references: [id], onDelete: Cascade)
  employerId String?   @unique

  manager   Manager? @relation(fields: [managerId], references: [id], onDelete: Cascade)
  managerId String?  @unique
}

model HhToken {
  createdAt DateTime @default(now())

  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String    @unique

  hhApplicantId String @unique
  accessToken   String @db.VarChar(255)
  refreshToken  String @db.VarChar(255)
  expiresIn     Int
}

model EmailVerification {
  code      String   @id @db.VarChar(6)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  role      String   @db.VarChar(30)

  @@unique([userId, role])
}

model PasswordResetRequest {
  id        String   @id @default(uuid())
  code      String   @db.VarChar(6)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique @db.VarChar(100)
  role      String   @db.VarChar(30)
}

model Vacancy {
  id                       String                @id @default(uuid())
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  name                     String                @db.VarChar(50)
  teamRole                 VacancyTeamRole
  description              String                @db.VarChar(3000)
  shortDescription         String?               @db.VarChar(3000)
  uniqueViewerApplicantIds String[]
  uniqueViewerIps          String[]
  salary                   Int
  salaryCurrency           Currency
  experience               VacancyExperience
  employmentType           VacancyEmploymentType
  price                    Int?
  city                     String                @db.VarChar(255)
  reportingForm            VacancyReportingForm
  workingHours             VacancyWorkingHours
  workplaceModel           VacancyWorkplaceModel
  status                   VacancyStatus         @default(UNDER_REVIEW)
  isHidden                 Boolean               @default(false)
  keySkills                String[]              @db.VarChar(500)
  responses                VacancyResponse[]
  employer                 Employer              @relation(fields: [employerId], references: [id], onDelete: Cascade)
  employerId               String
}

model Offer {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  message        String      @db.VarChar(500)
  salary         Int
  salaryCurrency Currency
  status         OfferStatus @default(PENDING)

  vacancyResponseId String          @unique
  vacancyResponse   VacancyResponse @relation(fields: [vacancyResponseId], references: [id], onDelete: Cascade)
}

model Resume {
  id                    String                       @id @default(uuid())
  createdAt             DateTime                     @default(now())
  importedFrom          ResumeImportExternalService?
  importedId            String?                      @db.VarChar(512)
  title                 String                       @db.VarChar(255)
  summary               String?                      @db.VarChar(5000)
  city                  String?                      @db.VarChar(255)
  skills                String[]                     @db.VarChar(5000)
  isVisibleToEmployers  Boolean                      @default(true)
  desiredSalary         Int?
  desiredSalaryCurrency Currency?
  certificates          ResumeCertificate[]
  contacts              ResumeContact[]
  education             ResumeEducation[]
  experience            ResumeExperience[]
  languages             ResumeLanguage[]
  applicant             Applicant                    @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId           String                       @unique
}

model ResumeCertificate {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(255)
  description String? @db.VarChar(255)
  year        Int?
  resume      Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId    String
}

model ResumeContact {
  id        String      @id @default(uuid())
  name      String?     @db.VarChar(255)
  type      ContactType
  value     String      @db.VarChar(255)
  preferred Boolean     @default(false)
  resume    Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId  String
}

model ResumeEducation {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(255)
  description String? @db.VarChar(255)
  degree      String? @db.VarChar(255)
  startYear   Int?
  endYear     Int?
  resume      Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId    String
}

model ResumeExperience {
  id          String  @id @default(uuid())
  company     String? @db.VarChar(256)
  position    String  @db.VarChar(255)
  startMonth  Int
  startYear   Int
  endMonth    Int?
  endYear     Int?
  description String? @db.VarChar(3000)
  resume      Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId    String
}

model ResumeLanguage {
  id       String  @id @default(uuid())
  name     String  @db.VarChar(100)
  level    String? @db.VarChar(100)
  resume   Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String
}

model Meeting {
  id              String                  @id @default(uuid())
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  name            String                  @db.VarChar(100)
  description     String                  @db.VarChar(1000)
  roomUrl         String                  @db.VarChar(255)
  type            MeetingType
  status          MeetingStatus           @default(PLANNED)
  feedback        MeetingFeedback[]
  scriptProtocols MeetingScriptProtocol[]
  transcript      String?                 @db.VarChar(65535)
  slot            MeetingSlot             @relation(fields: [slotId], references: [id], onDelete: Cascade)
  slotId          String                  @unique
  guestEmail      String?                 @db.VarChar(255)
  applicant       Applicant?              @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId     String?
  employer        Employer?               @relation(fields: [employerId], references: [id], onDelete: Cascade)
  employerId      String?
}

model MeetingSlot {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  dateTime  DateTime
  types     MeetingType[]
  payments  MeetingPayment[]
  meeting   Meeting?
  manager   Manager          @relation(fields: [managerId], references: [id], onDelete: Cascade)
  managerId String
}

model MeetingPayment {
  id             String               @id @default(uuid())
  createdAt      DateTime             @default(now())
  status         MeetingPaymentStatus @default(PENDING)
  guestEmail     String               @db.VarChar(255)
  url            String?              @db.VarChar(255)
  kassaPaymentId String?              @db.VarChar(255)
  successCode    String               @db.VarChar(127)
  failCode       String               @db.VarChar(127)
  amount         Int?
  dueDate        DateTime
  slot           MeetingSlot          @relation(fields: [slotId], references: [id], onDelete: Cascade)
  slotId         String
  type           MeetingType
}

model MeetingScriptProtocol {
  id         String                @id @default(uuid())
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  answers    MeetingScriptAnswer[]
  meeting    Meeting               @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId  String
  template   MeetingScriptTemplate @relation(fields: [templateId], references: [id])
  templateId String
}

model MeetingScriptTemplate {
  id          String                  @id @default(uuid())
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  title       String                  @db.VarChar(100)
  description String?                 @db.VarChar(300)
  protocols   MeetingScriptProtocol[]
  questions   MeetingScriptQuestion[] @relation("MeetingScriptQuestionToMeetingScriptTemplate")
}

model MeetingScriptQuestion {
  id            String                  @id @default(uuid())
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  text          String                  @db.VarChar(300)
  answerOptions String[]                @db.VarChar(300)
  answers       MeetingScriptAnswer[]
  templates     MeetingScriptTemplate[] @relation("MeetingScriptQuestionToMeetingScriptTemplate")
}

model MeetingScriptAnswer {
  id         String                @id @default(uuid())
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  text       String                @db.VarChar(1000)
  protocol   MeetingScriptProtocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  protocolId String
  question   MeetingScriptQuestion @relation(fields: [questionId], references: [id])
  questionId String
}

model MeetingFeedback {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(100)
  text      String   @db.VarChar(1000)
  meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId String
}

model PartnershipInquiry {
  id                 String                   @id @default(uuid())
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  representativeName String                   @db.VarChar(255)
  companyName        String                   @db.VarChar(255)
  contact            String                   @db.VarChar(255)
  email              String                   @db.VarChar(255)
  status             PartnershipInquiryStatus @default(PENDING)
}

model SoftArchive {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  originalId String
  modelName  String   @db.VarChar(127)
  payload    Json
}

model University {
  id        Int     @id @default(autoincrement())
  name      String  @unique @db.VarChar(300)
  shortName String? @db.VarChar(100)
  logoUrl   String? @db.VarChar(255)
}

model VacancyResponse {
  id                              String                @id @default(uuid())
  createdAt                       DateTime              @default(now())
  updatedAt                       DateTime              @updatedAt
  status                          VacancyResponseStatus @default(NEW_APPLICATION)
  isViewedByEmployer              Boolean               @default(false)
  offer                           Offer?
  candidate                       Applicant             @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId                     String
  vacancy                         Vacancy               @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  vacancyId                       String
  candidateRecommendedBy          Manager?              @relation(fields: [candidateRecommendedByManagerId], references: [id])
  candidateRecommendedByManagerId String?

  @@unique([candidateId, vacancyId])
}

model ApplicantAiChat {
  id        String                   @id @default(uuid())
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  history   ApplicantAiChatMessage[]

  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String
  employer    Employer  @relation(fields: [employerId], references: [id], onDelete: Cascade)
  employerId  String
}

model ApplicantAiChatMessage {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  prompt           String          @db.VarChar(65535)
  response         String          @db.VarChar(65535)
  promptTokens     Int
  completionTokens Int
  chat             ApplicantAiChat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId           String
}

enum ContactType {
  PHONE
  EMAIL
  TELEGRAM
  VK
  FACEBOOK
  LINKEDIN
  GITHUB
  OTHER
}

enum LanguageLevel {
  A1
  A2
  B1
  B2
  C1
  C2
  L1
}

enum ResumeImportExternalService {
  HH
}

enum Currency {
  RUB
  USD
  EUR
  GBP
  GEL
  AZN
  BYR
  KGS
  KZT
  UZS
}

enum EmployerLegalForm {
  INDIVIDUAL_ENTREPRENEUR
  OOO
  ZAO
  PAO
  NKO
}

enum EmployerSize {
  LESS_THAN_15
  BETWEEN_15_AND_50
  BETWEEN_50_AND_100
  BETWEEN_100_AND_500
  MORE_THAN_500
}

enum VacancyExperience {
  NO_EXPERIENCE
  BETWEEN_1_AND_3
  BETWEEN_3_AND_6
  MORE_THAN_6
}

enum VacancyEmploymentType {
  FULL_TIME
  PART_TIME
  PROJECT
  VOLUNTEER
  PROBATION
}

enum VacancyReportingForm {
  DIRECTOR
  PROJECT_MANAGER
  GROUP_WORK
  INDEPENDENT_WORK
}

enum VacancyTeamRole {
  COLLABORATIVE_WORK
  TEAM_COORDINATION
  TEAM_MANAGEMENT
  INDEPENDENT_WORK
}

enum VacancyWorkingHours {
  STRICT_SCHEDULE
  FREELANCE
  GROUP_WORK
  FIXED_HOURS
}

enum VacancyWorkplaceModel {
  OFFICE
  HYBRID
  REMOTE
}

enum VacancyStatus {
  UNDER_REVIEW
  FAILED_TO_PASS_REVIEW
  PUBLISHED
}

enum VacancyResponseStatus {
  NEW_APPLICATION
  SCREENING
  INTERVIEWING
  OFFER_MADE
  HIRED
  REJECTED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum PartnershipInquiryStatus {
  PENDING
  RESOLVED
}

enum MeetingType {
  INTERVIEW
  CONSULTATION_B2C
  CONSULTATION_B2B
  CONSULTATION_B2C_EXPERT
}

enum MeetingStatus {
  PLANNED
  CANCELED
  COMPLETED
}

enum MeetingPaymentStatus {
  PENDING
  FAIL
  SUCCESS
}

enum Gender {
  MALE
  FEMALE
}

enum ManagerAccessScopes {
  NONE
}
